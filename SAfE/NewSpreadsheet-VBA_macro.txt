Sub NewSpreadsheet()
'
' NewSpreadsheet Macro
' This macro creates a new spreadsheet in the end for the subject whose data are in the spreadsheet "INPUT".
'
' Shortcut: Ctrl+Shift+S
'
' Guilherme Coco Beltramini - 2013-Feb-19

    ' Declaring variables
    Dim ImportWrksht As String
    Dim InputWrksht As String
    Dim SbjWrksht As String
    Dim SessFirstRow As Integer
    Dim SessLastRow As Integer
    Dim InputRow As Integer
    Dim Row As Integer
    Dim CondFirstRow As Integer
    Dim CondLastRow As Integer
    
    InputWrksht = "INPUT"
    ImportWrksht = "Aux-import" ' sheet where marker ASCII file will be imported
    SbjWrksht = Sheets(InputWrksht).Range("C2").Value
    
    ' Check if spreadsheet exists already
    Set tmp = Nothing
    On Error Resume Next
    Set tmp = Sheets(SbjWrksht)
    On Error GoTo 0
    If Not tmp Is Nothing Then ' spreadsheet exists already
        MsgBox "There is already a spreadsheet for this subject. Delete or rename it.", , _
        "Error in the spreadsheet creation"
        Exit Sub
    End If
    
    ' Create spreadsheet
    Worksheets.Add(After:=Worksheets(Worksheets.Count)).Name = SbjWrksht
    
    ' All cells: white shading, arial 10, zoom 80%
    ActiveWindow.Zoom = 80
    Cells.Select
    With Selection.Interior
        .Pattern = xlSolid
        '.PatternColorIndex = xlAutomatic
        '.ThemeColor = xlThemeColorDark1
        '.TintAndShade = 0
        '.PatternTintAndShade = 0
    End With
    With Selection.Font
        .Name = "Arial"
        .Size = 10
        '.Strikethrough = False
        '.Superscript = False
        '.Subscript = False
        '.OutlineFont = False
        '.Shadow = False
        '.Underline = xlUnderlineStyleNone
        '.ThemeColor = xlThemeColorLight1
        '.TintAndShade = 0
        '.ThemeFont = xlThemeFontNone
    End With
    
    ' Set values, format and column size
    Range("B2") = "Subject:"
    Range("B3") = "Struct. scan:"
    Range("B4") = "TR (s):"
    Range("B2:B4").Select
    Selection.Font.Bold = True
    Selection.HorizontalAlignment = xlRight
    'Columns("B:B").EntireColumn.AutoFit --> column is now set to a specific width
    Range("N2") = "OBSERVATION:"
    Range("N2").Select
    Selection.Font.Bold = True
    Range("N3") = " --"
    
    ' Border
    Range("B2:L2,B3:L3,B4:L4").Select
    'Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    'Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    'Selection.Borders(xlInsideVertical).LineStyle = xlNone
    'Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    
    Columns("A:A").ColumnWidth = 1.86  ' 18 pixels
    Columns("B:B").ColumnWidth = 12.71 ' 94 pixels
    Columns("C:C").ColumnWidth = 11.86 ' 88 pixels
    Columns("D:D").ColumnWidth = 8.57  ' 65 pixels
    Columns("E:E").ColumnWidth = 8.43  ' 64 pixels
    Columns("F:F").ColumnWidth = 8.57  ' 65 pixels
    'Columns("I:I").ColumnWidth = 10.14 ' 76 pixels
    'column I is adjusted after the conditions are inserted
    Columns("J:J").ColumnWidth = 9.71  ' 73 pixels
    Columns("K:K").ColumnWidth = 12#   ' 89 pixels
    Columns("L:L").ColumnWidth = 8.57  ' 65 pixels
    
    ' Copy subject data and adjust format
    Sheets(SbjWrksht).Range("C2:C4").Value = Sheets(InputWrksht).Range("C3:C5").Value
    Sheets(SbjWrksht).Range("C2:C4").Select
    Selection.HorizontalAlignment = xlLeft
    'Range("C2:C3").Select
    'Selection.NumberFormat = "@" ' text
    Range("C4").Select
    Selection.NumberFormat = "0.00"

    ' Import EEG marker data
    SessFirstRow = 7 ' first row for the current session (starting at "fMRI") in the SbjWrksht
    InputRow = 10    ' row for the current session of the InputWrksht in the InputWrksht
    Do Until IsEmpty(Sheets(InputWrksht).Range("C" & InputRow))
    
        ' Write header and edit format
        Range("B" & SessFirstRow) = "fMRI:"
        Range("B" & SessFirstRow + 1) = "EEG:"
        Range("B" & SessFirstRow + 2) = "EEG-marker:"
        Range("B" & SessFirstRow & ":B" & SessFirstRow + 2).Select
        Selection.HorizontalAlignment = xlRight
        Selection.Font.Bold = True
        
        Range("C" & SessFirstRow).Value = Sheets(InputWrksht).Range("C" & InputRow).Value
        Range("C" & SessFirstRow + 1).Value = Sheets(InputWrksht).Range("D" & InputRow).Value
        Range("C" & SessFirstRow + 2).Value = Sheets(InputWrksht).Range("E" & InputRow).Value
        
        Range("B" & SessFirstRow & ":H" & SessFirstRow + 2).Select
        With Selection.Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .Color = 12632256
            .TintAndShade = 0
            .PatternTintAndShade = 0
        End With
        
        If Not (IsEmpty(Sheets(InputWrksht).Range("E" & InputRow))) Then
            
            ' There are markers for this session (if there are no markers,
            ' the corresponding row in EEG marker should not be filled)
            
            Range("B" & SessFirstRow + 3).Value = "Type"
            Range("C" & SessFirstRow + 3).Value = "Description"
            Range("D" & SessFirstRow + 3).Value = "Position"
            Range("E" & SessFirstRow + 3).Value = "Length"
            Range("F" & SessFirstRow + 3).Value = "Channel"
            
            Range("I" & SessFirstRow + 3).Value = "Description"
            Range("J" & SessFirstRow + 3).Value = "Onset (s)"
            Range("K" & SessFirstRow + 3).Value = "Duration (s)"
            Range("L" & SessFirstRow + 3).Value = "Channel"
            
            ' Import EEG data
            Call ImportMarkerFile(ImportWrksht, Sheets(InputWrksht).Range("C6").Value, _
            Range("C" & SessFirstRow + 2).Value)
            
            ' Remove connection
            'ActiveWorkbook.Connections(Range("C" & SessFirstRow + 2).Value).Delete ' not necessary; this is done in the end
    
            SessLastRow = ActiveSheet.Cells(Rows.Count, "B").End(xlUp).Row ' last row for this session
            
            ' Format cells
            SessFirstRow = SessFirstRow + 3 ' now SessFirstRow is the row where "Type | Description | ..." is
            
            ' Borders on the edges and vertical inside
            Range("B" & SessFirstRow & ":F" & SessLastRow & _
                ",I" & SessFirstRow & ":L" & SessLastRow).Select
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = xlContinuous
                .ColorIndex = xlAutomatic
                .TintAndShade = 0
                .Weight = xlThin
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlContinuous
                .ColorIndex = xlAutomatic
                .TintAndShade = 0
                .Weight = xlThin
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlContinuous
                .ColorIndex = xlAutomatic
                .TintAndShade = 0
                .Weight = xlThin
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = xlContinuous
                .ColorIndex = xlAutomatic
                .TintAndShade = 0
                .Weight = xlThin
            End With
            With Selection.Borders(xlInsideVertical)
                .LineStyle = xlContinuous
                .ColorIndex = xlAutomatic
                .TintAndShade = 0
                .Weight = xlThin
            End With
            
            ' Header and middle part: borders, alignment and bold
            Range("B" & SessFirstRow & ":F" & SessFirstRow & _
                ",G" & SessFirstRow & ":H" & SessLastRow & _
                ",I" & SessFirstRow & ":L" & SessFirstRow).Select
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlContinuous
                .ColorIndex = 0
                .TintAndShade = 0
                .Weight = xlThin
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlContinuous
                .ColorIndex = 0
                .TintAndShade = 0
                .Weight = xlThin
            End With
            Selection.HorizontalAlignment = xlCenter
            Selection.Font.Bold = True
            
            ' Centralize columns "Type", "Description" (2x), "Channel" (2x)
            Range("B" & SessFirstRow + 1 & ":C" & SessLastRow & _
                ",F" & SessFirstRow + 1 & ":F" & SessLastRow & _
                ",I" & SessFirstRow + 1 & ":I" & SessLastRow & _
                ",L" & SessFirstRow + 1 & ":L" & SessLastRow).Select
            Selection.HorizontalAlignment = xlCenter
            
            ' Align right columns "Position", "Length"
            Range("D" & SessFirstRow + 1 & ":E" & SessLastRow).Select
            Selection.HorizontalAlignment = xlRight
            
            ' Align right and show one decimal place for columns "Onset (s)" and "Duration (s)"
            Range("J" & SessFirstRow + 1 & ":K" & SessLastRow).Select
            Selection.NumberFormat = "0.0"
            Selection.HorizontalAlignment = xlRight
            
            SessFirstRow = SessLastRow + 3 ' skip 2 rows after the previous session
            
        Else
        
            ' No markers for this session
            SessLastRow = SessFirstRow + 2
            SessFirstRow = SessFirstRow + 5 ' skip 2 rows after the previous session
            
        End If
    
        InputRow = InputRow + 1
    Loop
    Columns("I:I").EntireColumn.AutoFit
    
    ' Count conditions
    CondFirstRow = SessFirstRow ' first row where the conditions counting table start
    Range("I" & CondFirstRow) = "Description"
    Range("J" & CondFirstRow) = "Count"
    
    ' Copy the conditions to the import worksheet
    Sheets(ImportWrksht).Activate
    Cells.Select
    Selection.Clear ' clear import worksheet
    Sheets(SbjWrksht).Activate
    Range("I12:I" & SessFirstRow - 3).Select
    Selection.Copy
    Sheets(ImportWrksht).Activate
    Sheets(ImportWrksht).Range("A1").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Application.CutCopyMode = False
    
    ' Sort ascending from the first to the last row
    ActiveWorkbook.Worksheets(ImportWrksht).Sort.SortFields.Clear
    CondLastRow = ActiveSheet.Cells(Rows.Count, "A").End(xlUp).Row
    ActiveWorkbook.Worksheets(ImportWrksht).Sort.SortFields.Add Key:=Range( _
        "A1:A" & CondLastRow), _
        SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    With ActiveWorkbook.Worksheets(ImportWrksht).Sort
        .SetRange Range("A1:A" & CondLastRow)
        .Header = xlGuess
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    
    ' From the first row to the last one, look for condition names different from "Description"
    CondLastRow = ActiveSheet.Cells(Rows.Count, "A").End(xlUp).Row ' last row of nonempty cell in the import worksheet
    SessFirstRow = SessFirstRow + 1 ' using same variable as an auxiliary variable
    Sheets(SbjWrksht).Activate
    For Row = 1 To CondLastRow
        If Sheets(ImportWrksht).Range("A" & Row) <> "Description" And _
            Sheets(ImportWrksht).Range("A" & Row) <> Sheets(SbjWrksht).Range("I" & SessFirstRow - 1) Then
            Sheets(SbjWrksht).Range("I" & SessFirstRow) = Sheets(ImportWrksht).Range("A" & Row)
            Sheets(SbjWrksht).Range("J" & SessFirstRow).Select
            ActiveCell.Formula = "=COUNTIF(I10:I" & SessLastRow & ",I" & SessFirstRow & ")"
            SessFirstRow = SessFirstRow + 1
        End If
    Next Row
    
    Range("I" & SessFirstRow) = "TOTAL"
    Range("I" & SessFirstRow + 1) = "Check"
    CondLastRow = SessFirstRow + 1 ' last row where the conditions counting table end
    
    ' Total number of conditions
    Range("J" & CondLastRow - 1).Select
    ActiveCell.Formula = "=COUNT(J10:J" & SessLastRow & ")"
    Range("I" & CondLastRow - 1 & ":J" & CondLastRow - 1).Select
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    Range("I" & CondLastRow - 1).Select
    Selection.Font.Bold = True
    
    ' Check the previous value
    Range("J" & CondLastRow).Select
    ActiveCell.Formula = "=SUM(J" & CondFirstRow + 1 & ":J" & CondLastRow - 2 & ")"
    
    ' Format table
    Range("I" & CondFirstRow & ":J" & CondLastRow).Select
    Selection.HorizontalAlignment = xlCenter
    Range("I" & CondFirstRow & ":J" & CondFirstRow).Select
    Selection.Font.Bold = True
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlDouble
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThick
    End With
    
    ' Case of no markers
    If Range("J" & CondLastRow) = 0 Then
        Range("N3") = "No EEG marker."
    End If
    
    ' Hide rows and columns
    Columns("X:X").Select
    Range(Selection, Selection.End(xlToRight)).Select
    Selection.EntireColumn.Hidden = True
    Rows(CondLastRow + 3 & ":" & CondLastRow + 3).Select
    Range(Selection, Selection.End(xlDown)).Select
    Selection.EntireRow.Hidden = True
    
    Range("A1").Select
    
    ' Protect worksheet
    ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True
    
    ' Remove connections
    Sheets(ImportWrksht).Activate
    For Each tmp In ActiveSheet.QueryTables
        tmp.Delete
    Next tmp
    
    ' Delete contents in the auxiliary spreadsheet
    Cells.Select
    Selection.ClearContents
    Range("A1").Select
    Sheets(SbjWrksht).Activate
    
End Sub


Private Sub ImportMarkerFile(ImportSheet As String, FilePath As String, FileName As String)
'
' ImportMarkerFile Macro
' Import markers from ASCII file to Excel.
'
' IMPORTANT: the selected cell must be just below "Type" of the current EPI
'

'  02 Oct 2011, 09:10 pm - Guilherme Coco Beltramini
'
' Changelog:
'  - This version is an adaptation of the macro "ImportMarker",
'    created on 16/Mar/2011, 09:28 pm. There were two changes:
'    1) The files are now imported based on the file name
'    2) The sampling rate is also read from the markers file
'  - 2013-Feb-19, 05:24 pm: the sampling rate is now read for each EEG marker file

    ' Declaring variables:
    Dim LastRow          As Integer
    Dim CurrentRow       As Integer ' must be always over the cell where one wants to write
    Dim FT               As Integer ' first occurence of ScannerTrigger
    Dim LT               As Integer ' last occurence of ScannerTrigger
    Dim MFirstRow        As Integer ' first row with marker (used only for the formula)
    Dim MLastRow         As Integer ' last row with marker (used only for the formula)
    Dim ScannerTrigger   As String
    Dim CurrentWorksheet As String
    
    ' Loading defaults
    ScannerTrigger = "Response"
    
    ' Disable screen updating to make macro run faster
    Application.ScreenUpdating = False
    
    ' Get current position
    CurrentWorksheet = ActiveCell.Worksheet.Name
    CurrentRow = ActiveCell.Row + 4 ' just below "Type | Description | ... "
    MFirstRow = CurrentRow + 1 ' first row with marker not equal to ScannerTrigger in the subject worksheet
    MLastRow = MFirstRow ' last row with marker not equal to ScannerTrigger
    
    ' Import markers to ImportSheet worksheet
    Sheets(ImportSheet).Activate
    Cells.Select
    Selection.Clear ' clear worksheet
    With ActiveSheet.QueryTables.Add(Connection:="TEXT;" & FilePath & Application.PathSeparator & FileName _
        , Destination:=Range("$A$1"))
        .Name = "dummy name"
        .FieldNames = True
        .RowNumbers = False
        .FillAdjacentFormulas = False
        .PreserveFormatting = True
        .RefreshOnFileOpen = False
        .RefreshStyle = xlInsertDeleteCells
        .SavePassword = False
        .SaveData = True
        .AdjustColumnWidth = True
        .RefreshPeriod = 0
        .TextFilePromptOnRefresh = False
        .TextFilePlatform = 850
        .TextFileStartRow = 1
        .TextFileParseType = xlDelimited
        .TextFileTextQualifier = xlTextQualifierDoubleQuote
        .TextFileConsecutiveDelimiter = True
        .TextFileTabDelimiter = False
        .TextFileSemicolonDelimiter = False
        .TextFileCommaDelimiter = True
        .TextFileSpaceDelimiter = True
        .TextFileColumnDataTypes = Array(1, 1, 1, 1, 1)
        .TextFileTrailingMinusNumbers = True
        .Refresh BackgroundQuery:=False
    End With
    
    ' Last row in column A
    LastRow = ActiveSheet.Cells(Rows.Count, "A").End(xlUp).Row
    
    ' Copy first trigger
    Sheets(CurrentWorksheet).Range("B" & CurrentRow & ":F" & CurrentRow).Value = _
        Sheets(ImportSheet).Range("A3:E3").Value
    
    CurrentRow = CurrentRow + 1
    
    ' Sort data
    ActiveWorkbook.Worksheets(ImportSheet).Sort.SortFields.Clear
    ActiveWorkbook.Worksheets(ImportSheet).Sort.SortFields.Add _
        Key:=Range("A3:A" & LastRow), _
        SortOn:=xlSortOnValues, _
        Order:=xlAscending, _
        DataOption:=xlSortNormal
    ActiveWorkbook.Worksheets(ImportSheet).Sort.SortFields.Add _
        Key:=Range("B3:B" & LastRow), _
        SortOn:=xlSortOnValues, _
        Order:=xlAscending, _
        DataOption:=xlSortNormal
    ActiveWorkbook.Worksheets(ImportSheet).Sort.SortFields.Add _
        Key:=Range("C3:C" & LastRow), _
        SortOn:=xlSortOnValues, _
        Order:=xlAscending, _
        DataOption:=xlSortNormal
    With ActiveWorkbook.Worksheets(ImportSheet).Sort
        .SetRange Range("A2:E" & LastRow)
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    
    ' Find the first occurence of ScannerTrigger ("FT")
    Sheets(ImportSheet).Activate
    ActiveSheet.Range("A1").Select
    Cells.Find(What:=ScannerTrigger, _
        After:=ActiveCell, _
        LookIn:=xlValues, _
        LookAt:=xlPart, _
        SearchOrder:=xlByRows, _
        SearchDirection:=xlNext, _
        MatchCase:=True, _
        SearchFormat:=False).Activate
    FT = ActiveCell.Row
    
    ' Copy markers from auxiliary worksheet
    If FT <> 3 Then ' There are other markers before the first ScannerTrigger
        Call InsertCopy(ImportSheet, 3, FT - 1, CurrentWorksheet, CurrentRow, FT - 3)
        CurrentRow = CurrentRow + FT - 3
    End If
    
    ' Find the last occurence of ScannerTrigger ("LT")
    Sheets(ImportSheet).Activate
    ActiveSheet.Range("A" & FT).Select
    Cells.Find(What:=ScannerTrigger, _
        After:=ActiveCell, _
        LookIn:=xlValues, _
        LookAt:=xlPart, _
        SearchOrder:=xlByRows, _
        SearchDirection:=xlNext, _
        MatchCase:=True, _
        SearchFormat:=False).Activate
    Do
        LT = ActiveCell.Row
        Cells.FindNext(After:=ActiveCell).Activate
    Loop Until ActiveCell.Row = FT
    
    If LT <> LastRow Then ' There are still markers after the last ScannerTrigger
        ' Copy markers from auxiliary worksheet
        Call InsertCopy(ImportSheet, LT + 1, LastRow, CurrentWorksheet, CurrentRow, LastRow - LT)
    End If
    MLastRow = Selection(Selection.Count).Row
    
    ' Get sampling rate
    'SamplRate = Left(Sheets(ImportSheet).Range("C1"), InStr(1, Sheets(ImportSheet).Range("C1"), "Hz") - 1) returns string
    SamplRate = Val(Sheets(ImportSheet).Range("C1"))
    
    ' Formulas
    Sheets(CurrentWorksheet).Activate
    ActiveSheet.Range("I" & MFirstRow).Formula = "=C" & MFirstRow
    ActiveSheet.Range("J" & MFirstRow).Formula = "=(D" & MFirstRow & "-$D$" & (MFirstRow - 1) & ")/" & SamplRate
    ActiveSheet.Range("K" & MFirstRow).Formula = "=E" & MFirstRow & "/" & SamplRate
    ActiveSheet.Range("L" & MFirstRow).Formula = "=F" & MFirstRow
    ActiveSheet.Range("I" & MFirstRow & ":L" & MFirstRow).Select
    If MFirstRow < MLastRow Then
        Selection.AutoFill Destination:=Range("I" & MFirstRow & ":L" & MLastRow), Type:=xlFillDefault
    End If
    
    ' Return screen updating to default value
    Application.ScreenUpdating = True
   
End Sub

Private Sub InsertCopy(Sheet1 As String, row11 As Integer, _
row12 As Integer, Sheet2 As String, row2 As Integer, Nrows As Integer)
'
' InsertCopy Macro
' Copy information from Sheet1, rows row11 to row12, columns A to E
' and paste values in Sheet2, rows row2 to row2+Nrows, columns B to F,
' by inserting Nrows rows in Sheet2.

'  11 Mar 2011, 06:50 pm - Guilherme C. Beltramini

    Dim i As Integer ' auxiliary variable
    
    ' Insert "Nrows" rows below row "row2"
    Sheets(Sheet2).Activate
    ActiveSheet.Range("A" & row2).Select
    For i = 1 To Nrows
        Selection.EntireRow.Insert , CopyOrigin:=xlFormatFromLeftOrAbove
    Next i
        
    ' Copy
    Sheets(Sheet1).Activate
    ActiveSheet.Range("A" & row11 & ":E" & row12).Select
    Selection.Copy
    
    ' Paste special (values)
    Sheets(Sheet2).Activate
    ActiveSheet.Range("B" & row2 & ":F" & row2 + Nrows - 1).Select
    Selection.PasteSpecial _
        Paste:=xlPasteValues, _
        Operation:=xlNone, _
        SkipBlanks:=False, _
        Transpose:=False
    Application.CutCopyMode = False ' clear clipboard


End Sub